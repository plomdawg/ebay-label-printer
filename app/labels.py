"""
Shipping label management

Handles:
- Purchasing shipping labels via eBay Fulfillment API
- Label refunding if needed
- PDF download and storage
"""
# pylint: disable=useless-return
import logging
from typing import Dict, Any, Optional
from pathlib import Path

import requests

from ebay_rest import Error as EbayError

from .ebay_client import EbayClientMixin

logger = logging.getLogger(__name__)


class LabelManager(EbayClientMixin):
    """Manages shipping label purchasing and handling"""

    def buy_shipping_label(
        self, order_data: Dict[str, Any]
    ) -> Optional[Dict[str, Any]]:
        """
        Buy a shipping label for the given order

        Args:
            order_data: eBay order information

        Returns:
            Label information including PDF path, or None if failed
        """
        order_id = order_data.get("orderId", "unknown")
        logger.info("Buying shipping label for order %s", order_id)

        if not self.api:
            logger.warning("eBay API not initialized, cannot buy shipping label")
            return None

        try:
            # Extract shipping information from order
            line_items = order_data.get("lineItems", [])
            if not line_items:
                logger.error("No line items found in order %s", order_id)
                return None

            # Get the first line item for fulfillment
            line_item = line_items[0]
            line_item_id = line_item.get("lineItemId", "")

            # Prepare shipping fulfillment request
            fulfillment_data = {
                "lineItems": [
                    {
                        "lineItemId": line_item_id,
                        "quantity": line_item.get("quantity", 1),
                    }
                ],
                "shippingServiceCode": "USPS_PRIORITY_MAIL",  # Default shipping service
                "trackingNumber": "",  # Will be generated by eBay
                "shippedDate": "",  # Will be set when shipped
            }

            # Create shipping fulfillment
            fulfillment_response = (
                self.api.sell_fulfillment_create_shipping_fulfillment(
                    order_id=order_id, body=fulfillment_data
                )
            )

            if fulfillment_response and "fulfillmentId" in fulfillment_response:
                fulfillment_id = fulfillment_response["fulfillmentId"]
                logger.info(
                    "Created fulfillment %s for order %s", fulfillment_id, order_id
                )

                # Try to get the shipping label
                label_response = self.api.sell_fulfillment_get_shipping_fulfillment(
                    order_id=order_id, fulfillment_id=fulfillment_id
                )

                if label_response:
                    # Check if label URL is available
                    label_download_url = label_response.get("labelDownloadUrl")
                    if label_download_url:
                        # Download the label PDF
                        pdf_path = self.download_label_pdf(label_download_url, order_id)
                        if pdf_path:
                            return {
                                "fulfillment_id": fulfillment_id,
                                "label_url": label_download_url,
                                "pdf_path": str(pdf_path),
                                "tracking_number": label_response.get(
                                    "trackingNumber", ""
                                ),
                                "order_id": order_id,
                            }
                    else:
                        logger.warning(
                            "No label download URL in response for order %s", order_id
                        )
                        return {
                            "fulfillment_id": fulfillment_id,
                            "order_id": order_id,
                            "status": "fulfillment_created_no_label",
                        }
            else:
                logger.error("Failed to create fulfillment for order %s", order_id)

        except EbayError as e:
            logger.error("eBay API error buying label for order %s: %s", order_id, e)
        except (OSError, ValueError, KeyError) as e:
            logger.error("Unexpected error buying label for order %s: %s", order_id, e)

        return None

    def download_label_pdf(self, label_url: str, order_id: str) -> Optional[Path]:
        """
        Download label PDF from eBay

        Args:
            label_url: URL to the label PDF
            order_id: Order identifier for filename

        Returns:
            Path to downloaded PDF file, or None if failed
        """
        logger.info("Downloading label PDF for order %s", order_id)

        try:
            # Create data directory if it doesn't exist
            data_dir = Path("data/labels")
            data_dir.mkdir(parents=True, exist_ok=True)

            # Generate filename
            pdf_filename = f"shipping_label_{order_id}.pdf"
            pdf_path = data_dir / pdf_filename

            # Download the PDF
            response = requests.get(label_url, timeout=30)
            response.raise_for_status()

            # Save to file
            with open(pdf_path, "wb") as f:
                f.write(response.content)

            logger.info("Successfully downloaded label PDF to %s", pdf_path)
            return pdf_path

        except requests.RequestException as e:
            logger.error("Failed to download label PDF for order %s: %s", order_id, e)
        except (OSError, ValueError) as e:
            logger.error(
                "Unexpected error downloading label PDF for order %s: %s", order_id, e
            )

        return None

    def refund_label(self, fulfillment_id: str) -> bool:
        """
        Refund a shipping label if needed

        Args:
            fulfillment_id: eBay fulfillment identifier

        Returns:
            True if refund successful, False otherwise
        """
        # TODO: Implement label refunding
        logger.info("Refunding label for fulfillment %s", fulfillment_id)

        # Placeholder implementation

        return False
